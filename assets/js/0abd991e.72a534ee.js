"use strict";(self.webpackChunkcosmos_sdk_docs=self.webpackChunkcosmos_sdk_docs||[]).push([[6780],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||i;return n?r.createElement(m,o(o({ref:t},u),{},{components:n})):r.createElement(m,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},26721:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={},o="ADR 17: Historical Header Module",l={unversionedId:"architecture/adr-017-historical-header-module",id:"version-v0.50/architecture/adr-017-historical-header-module",title:"ADR 17: Historical Header Module",description:"Changelog",source:"@site/versioned_docs/version-v0.50/architecture/adr-017-historical-header-module.md",sourceDirName:"architecture",slug:"/architecture/adr-017-historical-header-module",permalink:"/v0.50/architecture/adr-017-historical-header-module",draft:!1,tags:[],version:"v0.50",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ADR 016: Validator Consensus Key Rotation",permalink:"/v0.50/architecture/adr-016-validator-consensus-key-rotation"},next:{title:"ADR 18: Extendable Voting Periods",permalink:"/v0.50/architecture/adr-018-extendable-voting-period"}},s={},c=[{value:"Changelog",id:"changelog",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Status",id:"status",level:2},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"References",id:"references",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"adr-17-historical-header-module"},"ADR 17: Historical Header Module"),(0,a.kt)("h2",{id:"changelog"},"Changelog"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"26 November 2019: Start of first version"),(0,a.kt)("li",{parentName:"ul"},"2 December 2019: Final draft of first version")),(0,a.kt)("h2",{id:"context"},"Context"),(0,a.kt)("p",null,"In order for the Cosmos SDK to implement the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cosmos/ics"},"IBC specification"),", modules within the Cosmos SDK must have the ability to introspect recent consensus states (validator sets & commitment roots) as proofs of these values on other chains must be checked during the handshakes."),(0,a.kt)("h2",{id:"decision"},"Decision"),(0,a.kt)("p",null,"The application MUST store the most recent ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," headers in a persistent store. At first, this store MAY be the current Merklised store. A non-Merklised store MAY be used later as no proofs are necessary."),(0,a.kt)("p",null,"The application MUST store this information by storing new headers immediately when handling ",(0,a.kt)("inlineCode",{parentName:"p"},"abci.RequestBeginBlock"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"func BeginBlock(ctx sdk.Context, keeper HistoricalHeaderKeeper, req abci.RequestBeginBlock) abci.ResponseBeginBlock {\n  info := HistoricalInfo{\n    Header: ctx.BlockHeader(),\n    ValSet: keeper.StakingKeeper.GetAllValidators(ctx), // note that this must be stored in a canonical order\n  }\n  keeper.SetHistoricalInfo(ctx, ctx.BlockHeight(), info)\n  n := keeper.GetParamRecentHeadersToStore()\n  keeper.PruneHistoricalInfo(ctx, ctx.BlockHeight() - n)\n  // continue handling request\n}\n")),(0,a.kt)("p",null,"Alternatively, the application MAY store only the hash of the validator set."),(0,a.kt)("p",null,"The application MUST make these past ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," committed headers available for querying by Cosmos SDK modules through the ",(0,a.kt)("inlineCode",{parentName:"p"},"Keeper"),"'s ",(0,a.kt)("inlineCode",{parentName:"p"},"GetHistoricalInfo")," function. This MAY be implemented in a new module, or it MAY also be integrated into an existing one (likely ",(0,a.kt)("inlineCode",{parentName:"p"},"x/staking")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"x/ibc"),")."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"n")," MAY be configured as a parameter store parameter, in which case it could be changed by ",(0,a.kt)("inlineCode",{parentName:"p"},"ParameterChangeProposal"),"s, although it will take some blocks for the stored information to catch up if ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," is increased."),(0,a.kt)("h2",{id:"status"},"Status"),(0,a.kt)("p",null,"Proposed."),(0,a.kt)("h2",{id:"consequences"},"Consequences"),(0,a.kt)("p",null,"Implementation of this ADR will require changes to the Cosmos SDK. It will not require changes to Tendermint."),(0,a.kt)("h3",{id:"positive"},"Positive"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Easy retrieval of headers & state roots for recent past heights by modules anywhere in the Cosmos SDK."),(0,a.kt)("li",{parentName:"ul"},"No RPC calls to Tendermint required."),(0,a.kt)("li",{parentName:"ul"},"No ABCI alterations required.")),(0,a.kt)("h3",{id:"negative"},"Negative"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Duplicates ",(0,a.kt)("inlineCode",{parentName:"li"},"n")," headers data in Tendermint & the application (additional disk usage) - in the long term, an approach such as ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/tendermint/tendermint/issues/4210"},"this")," might be preferable.")),(0,a.kt)("h3",{id:"neutral"},"Neutral"),(0,a.kt)("p",null,"(none known)"),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/cosmos/ibc/tree/master/spec/core/ics-002-client-semantics#consensus-state-introspection"},'ICS 2: "Consensus state introspection"'))))}p.isMDXComponent=!0}}]);