"use strict";(self.webpackChunkcosmos_sdk_docs=self.webpackChunkcosmos_sdk_docs||[]).push([[4828],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(n),c=r,g=u["".concat(l,".").concat(c)]||u[c]||d[c]||i;return n?a.createElement(g,o(o({ref:t},m),{},{components:n})):a.createElement(g,o({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},34955:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:1},o="Messages and Queries",s={unversionedId:"building-modules/messages-and-queries",id:"building-modules/messages-and-queries",title:"Messages and Queries",description:"Msgs and Queries are the two primary objects handled by modules. Most of the core components defined in a module, like Msg services, keepers and Query services, exist to process messages and queries.",source:"@site/docs/building-modules/02-messages-and-queries.md",sourceDirName:"building-modules",slug:"/building-modules/messages-and-queries",permalink:"/main/building-modules/messages-and-queries",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Module Manager",permalink:"/main/building-modules/module-manager"},next:{title:"Msg Services",permalink:"/main/building-modules/msg-services"}},l={},p=[{value:"Messages",id:"messages",level:2},{value:"<code>Msg</code> Services",id:"msg-services",level:3},{value:"Legacy Amino <code>LegacyMsg</code>s",id:"legacy-amino-legacymsgs",level:3},{value:"Queries",id:"queries",level:2},{value:"gRPC Queries",id:"grpc-queries",level:3},{value:"Legacy Queries",id:"legacy-queries",level:3},{value:"Store Queries",id:"store-queries",level:3}],m={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"messages-and-queries"},"Messages and Queries"),(0,r.kt)("admonition",{title:"Synopsis",type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"Msg"),"s and ",(0,r.kt)("inlineCode",{parentName:"p"},"Queries")," are the two primary objects handled by modules. Most of the core components defined in a module, like ",(0,r.kt)("inlineCode",{parentName:"p"},"Msg")," services, ",(0,r.kt)("inlineCode",{parentName:"p"},"keeper"),"s and ",(0,r.kt)("inlineCode",{parentName:"p"},"Query")," services, exist to process ",(0,r.kt)("inlineCode",{parentName:"p"},"message"),"s and ",(0,r.kt)("inlineCode",{parentName:"p"},"queries"),".")),(0,r.kt)("admonition",{title:"Pre-requisite Readings",type:"note"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/main/building-modules/intro"},"Introduction to Cosmos SDK Modules")))),(0,r.kt)("h2",{id:"messages"},"Messages"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Msg"),"s are objects whose end-goal is to trigger state-transitions. They are wrapped in ",(0,r.kt)("a",{parentName:"p",href:"/main/core/transactions"},"transactions"),", which may contain one or more of them."),(0,r.kt)("p",null,"When a transaction is relayed from the underlying consensus engine to the Cosmos SDK application, it is first decoded by ",(0,r.kt)("a",{parentName:"p",href:"/main/core/baseapp"},(0,r.kt)("inlineCode",{parentName:"a"},"BaseApp")),". Then, each message contained in the transaction is extracted and routed to the appropriate module via ",(0,r.kt)("inlineCode",{parentName:"p"},"BaseApp"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"MsgServiceRouter")," so that it can be processed by the module's ",(0,r.kt)("a",{parentName:"p",href:"/main/building-modules/msg-services"},(0,r.kt)("inlineCode",{parentName:"a"},"Msg")," service"),". For a more detailed explanation of the lifecycle of a transaction, click ",(0,r.kt)("a",{parentName:"p",href:"/main/basics/tx-lifecycle"},"here"),"."),(0,r.kt)("h3",{id:"msg-services"},(0,r.kt)("inlineCode",{parentName:"h3"},"Msg")," Services"),(0,r.kt)("p",null,"Defining Protobuf ",(0,r.kt)("inlineCode",{parentName:"p"},"Msg")," services is the recommended way to handle messages. A Protobuf ",(0,r.kt)("inlineCode",{parentName:"p"},"Msg")," service should be created for each module, typically in ",(0,r.kt)("inlineCode",{parentName:"p"},"tx.proto")," (see more info about ",(0,r.kt)("a",{parentName:"p",href:"/main/core/encoding#faq"},"conventions and naming"),"). It must have an RPC service method defined for each message in the module."),(0,r.kt)("p",null,"See an example of a ",(0,r.kt)("inlineCode",{parentName:"p"},"Msg")," service definition from ",(0,r.kt)("inlineCode",{parentName:"p"},"x/bank")," module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/proto/cosmos/bank/v1beta1/tx.proto#L13-L36\n")),(0,r.kt)("p",null,"Each ",(0,r.kt)("inlineCode",{parentName:"p"},"Msg")," service method must have exactly one argument, which must implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"sdk.Msg")," interface, and a Protobuf response. The naming convention is to call the RPC argument ",(0,r.kt)("inlineCode",{parentName:"p"},"Msg<service-rpc-name>")," and the RPC response ",(0,r.kt)("inlineCode",{parentName:"p"},"Msg<service-rpc-name>Response"),". For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"  rpc Send(MsgSend) returns (MsgSendResponse);\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"sdk.Msg")," interface is a simplified version of the Amino ",(0,r.kt)("inlineCode",{parentName:"p"},"LegacyMsg")," interface described ",(0,r.kt)("a",{parentName:"p",href:"#legacy-amino-msgs"},"below")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"GetSigners()")," method. For backwards compatibility with ",(0,r.kt)("a",{parentName:"p",href:"#legacy-amino-msgs"},"Amino ",(0,r.kt)("inlineCode",{parentName:"a"},"LegacyMsg"),"s"),", existing ",(0,r.kt)("inlineCode",{parentName:"p"},"LegacyMsg")," types should be used as the request parameter for ",(0,r.kt)("inlineCode",{parentName:"p"},"service")," RPC definitions. Newer ",(0,r.kt)("inlineCode",{parentName:"p"},"sdk.Msg")," types, which only support ",(0,r.kt)("inlineCode",{parentName:"p"},"service")," definitions, should use canonical ",(0,r.kt)("inlineCode",{parentName:"p"},"Msg...")," name."),(0,r.kt)("p",null,"The Cosmos SDK uses Protobuf definitions to generate client and server code:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MsgServer")," interface defines the server API for the ",(0,r.kt)("inlineCode",{parentName:"li"},"Msg")," service and its implementation is described as part of the ",(0,r.kt)("a",{parentName:"li",href:"/main/building-modules/msg-services"},(0,r.kt)("inlineCode",{parentName:"a"},"Msg")," services")," documentation."),(0,r.kt)("li",{parentName:"ul"},"Structures are generated for all RPC request and response types.")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"RegisterMsgServer")," method is also generated and should be used to register the module's ",(0,r.kt)("inlineCode",{parentName:"p"},"MsgServer")," implementation in ",(0,r.kt)("inlineCode",{parentName:"p"},"RegisterServices")," method from the ",(0,r.kt)("a",{parentName:"p",href:"/main/building-modules/module-manager#appmodule"},(0,r.kt)("inlineCode",{parentName:"a"},"AppModule")," interface"),"."),(0,r.kt)("p",null,"In order for clients (CLI and grpc-gateway) to have these URLs registered, the Cosmos SDK provides the function ",(0,r.kt)("inlineCode",{parentName:"p"},"RegisterMsgServiceDesc(registry codectypes.InterfaceRegistry, sd *grpc.ServiceDesc)")," that should be called inside module's ",(0,r.kt)("a",{parentName:"p",href:"/main/building-modules/module-manager#appmodulebasic"},(0,r.kt)("inlineCode",{parentName:"a"},"RegisterInterfaces"))," method, using the proto-generated ",(0,r.kt)("inlineCode",{parentName:"p"},"&_Msg_serviceDesc")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"*grpc.ServiceDesc")," argument."),(0,r.kt)("h3",{id:"legacy-amino-legacymsgs"},"Legacy Amino ",(0,r.kt)("inlineCode",{parentName:"h3"},"LegacyMsg"),"s"),(0,r.kt)("p",null,"The following way of defining messages is deprecated and using ",(0,r.kt)("a",{parentName:"p",href:"#msg-services"},(0,r.kt)("inlineCode",{parentName:"a"},"Msg")," services")," is preferred."),(0,r.kt)("p",null,"Amino ",(0,r.kt)("inlineCode",{parentName:"p"},"LegacyMsg"),"s can be defined as protobuf messages. The messages definition usually includes a list of parameters needed to process the message that will be provided by end-users when they want to create a new transaction containing said message."),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"LegacyMsg")," is typically accompanied by a standard constructor function, that is called from one of the ",(0,r.kt)("a",{parentName:"p",href:"/main/building-modules/module-interfaces"},"module's interface"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"message"),"s also need to implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"sdk.Msg")," interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/types/tx_msg.go#L21-L28\n")),(0,r.kt)("p",null,"It extends ",(0,r.kt)("inlineCode",{parentName:"p"},"proto.Message")," and contains the following methods:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GetSignBytes() []byte"),": Return the canonical byte representation of the message. Used to generate a signature.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/auth/migrations/legacytx/stdsign.go#L21-L29\n")),(0,r.kt)("p",null,"See an example implementation of a ",(0,r.kt)("inlineCode",{parentName:"p"},"message")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"gov")," module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/x/gov/types/v1/msgs.go#L103-L150\n")),(0,r.kt)("h2",{id:"queries"},"Queries"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," is a request for information made by end-users of applications through an interface and processed by a full-node. A ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," is received by a full-node through its consensus engine and relayed to the application via the ABCI. It is then routed to the appropriate module via ",(0,r.kt)("inlineCode",{parentName:"p"},"BaseApp"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"QueryRouter")," so that it can be processed by the module's query service (./04-query-services.md). For a deeper look at the lifecycle of a ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),", click ",(0,r.kt)("a",{parentName:"p",href:"/main/basics/query-lifecycle"},"here"),"."),(0,r.kt)("h3",{id:"grpc-queries"},"gRPC Queries"),(0,r.kt)("p",null,"Queries should be defined using ",(0,r.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers/docs/proto#services"},"Protobuf services"),". A ",(0,r.kt)("inlineCode",{parentName:"p"},"Query")," service should be created per module in ",(0,r.kt)("inlineCode",{parentName:"p"},"query.proto"),". This service lists endpoints starting with ",(0,r.kt)("inlineCode",{parentName:"p"},"rpc"),"."),(0,r.kt)("p",null,"Here's an example of such a ",(0,r.kt)("inlineCode",{parentName:"p"},"Query")," service definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/proto/cosmos/auth/v1beta1/query.proto#L14-L89\n")),(0,r.kt)("p",null,"As ",(0,r.kt)("inlineCode",{parentName:"p"},"proto.Message"),"s, generated ",(0,r.kt)("inlineCode",{parentName:"p"},"Response")," types implement by default ",(0,r.kt)("inlineCode",{parentName:"p"},"String()")," method of ",(0,r.kt)("a",{parentName:"p",href:"https://pkg.go.dev/fmt#Stringer"},(0,r.kt)("inlineCode",{parentName:"a"},"fmt.Stringer")),"."),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"RegisterQueryServer")," method is also generated and should be used to register the module's query server in the ",(0,r.kt)("inlineCode",{parentName:"p"},"RegisterServices")," method from the ",(0,r.kt)("a",{parentName:"p",href:"/main/building-modules/module-manager#appmodule"},(0,r.kt)("inlineCode",{parentName:"a"},"AppModule")," interface"),"."),(0,r.kt)("h3",{id:"legacy-queries"},"Legacy Queries"),(0,r.kt)("p",null,"Before the introduction of Protobuf and gRPC in the Cosmos SDK, there was usually no specific ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," object defined by module developers, contrary to ",(0,r.kt)("inlineCode",{parentName:"p"},"message"),"s. Instead, the Cosmos SDK took the simpler approach of using a simple ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," to define each ",(0,r.kt)("inlineCode",{parentName:"p"},"query"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," contains the ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," type and all the arguments needed to process it. For most module queries, the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," should look like the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"queryCategory/queryRoute/queryType/arg1/arg2/...\n")),(0,r.kt)("p",null,"where:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"queryCategory")," is the category of the ",(0,r.kt)("inlineCode",{parentName:"li"},"query"),", typically ",(0,r.kt)("inlineCode",{parentName:"li"},"custom")," for module queries. It is used to differentiate between different kinds of queries within ",(0,r.kt)("inlineCode",{parentName:"li"},"BaseApp"),"'s ",(0,r.kt)("a",{parentName:"li",href:"/main/core/baseapp#query"},(0,r.kt)("inlineCode",{parentName:"a"},"Query")," method"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"queryRoute")," is used by ",(0,r.kt)("inlineCode",{parentName:"li"},"BaseApp"),"'s ",(0,r.kt)("a",{parentName:"li",href:"/main/core/baseapp#query-routing"},(0,r.kt)("inlineCode",{parentName:"a"},"queryRouter"))," to map the ",(0,r.kt)("inlineCode",{parentName:"li"},"query")," to its module. Usually, ",(0,r.kt)("inlineCode",{parentName:"li"},"queryRoute")," should be the name of the module."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"queryType")," is used by the module's ",(0,r.kt)("a",{parentName:"li",href:"/main/building-modules/query-services#legacy-queriers"},(0,r.kt)("inlineCode",{parentName:"a"},"querier"))," to map the ",(0,r.kt)("inlineCode",{parentName:"li"},"query")," to the appropriate ",(0,r.kt)("inlineCode",{parentName:"li"},"querier function")," within the module."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"args")," are the actual arguments needed to process the ",(0,r.kt)("inlineCode",{parentName:"li"},"query"),". They are filled out by the end-user. Note that for bigger queries, you might prefer passing arguments in the ",(0,r.kt)("inlineCode",{parentName:"li"},"Data")," field of the request ",(0,r.kt)("inlineCode",{parentName:"li"},"req")," instead of the ",(0,r.kt)("inlineCode",{parentName:"li"},"path"),".")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," for each ",(0,r.kt)("inlineCode",{parentName:"p"},"query")," must be defined by the module developer in the module's ",(0,r.kt)("a",{parentName:"p",href:"/main/building-modules/module-interfaces#query-commands"},"command-line interface file"),".Overall, there are 3 mains components module developers need to implement in order to make the subset of the state defined by their module queryable:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("a",{parentName:"li",href:"/main/building-modules/query-services#legacy-queriers"},(0,r.kt)("inlineCode",{parentName:"a"},"querier")),", to process the ",(0,r.kt)("inlineCode",{parentName:"li"},"query")," once it has been ",(0,r.kt)("a",{parentName:"li",href:"/main/core/baseapp#query-routing"},"routed to the module"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/main/building-modules/module-interfaces#query-commands"},"Query commands")," in the module's CLI file, where the ",(0,r.kt)("inlineCode",{parentName:"li"},"path")," for each ",(0,r.kt)("inlineCode",{parentName:"li"},"query")," is specified."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"query")," return types. Typically defined in a file ",(0,r.kt)("inlineCode",{parentName:"li"},"types/querier.go"),", they specify the result type of each of the module's ",(0,r.kt)("inlineCode",{parentName:"li"},"queries"),". These custom types must implement the ",(0,r.kt)("inlineCode",{parentName:"li"},"String()")," method of ",(0,r.kt)("a",{parentName:"li",href:"https://pkg.go.dev/fmt#Stringer"},(0,r.kt)("inlineCode",{parentName:"a"},"fmt.Stringer")),".")),(0,r.kt)("h3",{id:"store-queries"},"Store Queries"),(0,r.kt)("p",null,"Store queries query directly for store keys. They use ",(0,r.kt)("inlineCode",{parentName:"p"},"clientCtx.QueryABCI(req abci.RequestQuery)")," to return the full ",(0,r.kt)("inlineCode",{parentName:"p"},"abci.ResponseQuery")," with inclusion Merkle proofs."),(0,r.kt)("p",null,"See following examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.50.0-alpha.0/baseapp/abci.go#L864-L894\n")))}d.isMDXComponent=!0}}]);