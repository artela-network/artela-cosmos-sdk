"use strict";(self.webpackChunkcosmos_sdk_docs=self.webpackChunkcosmos_sdk_docs||[]).push([[6967],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var i=a.createContext({}),d=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(i.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,i=e.parentName,p=r(e,["components","mdxType","originalType","parentName"]),c=d(t),m=l,k=c["".concat(i,".").concat(m)]||c[m]||u[m]||o;return t?a.createElement(k,s(s({ref:n},p),{},{components:t})):a.createElement(k,s({ref:n},p))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,s=new Array(o);s[0]=c;var r={};for(var i in n)hasOwnProperty.call(n,i)&&(r[i]=n[i]);r.originalType=e,r.mdxType="string"==typeof e?e:l,s[1]=r;for(var d=2;d<o;d++)s[d]=t[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},86534:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var a=t(87462),l=(t(67294),t(3905));const o={sidebar_position:1},s="x/bank",r={unversionedId:"modules/bank/README",id:"modules/bank/README",title:"x/bank",description:"Abstract",source:"@site/docs/modules/bank/README.md",sourceDirName:"modules/bank",slug:"/modules/bank/",permalink:"/main/modules/bank/",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"x/authz",permalink:"/main/modules/authz/"},next:{title:"x/consensus",permalink:"/main/modules/consensus/"}},i={},d=[{value:"Abstract",id:"abstract",level:2},{value:"Contents",id:"contents",level:2},{value:"Supply",id:"supply",level:2},{value:"Total Supply",id:"total-supply",level:3},{value:"Module Accounts",id:"module-accounts",level:2},{value:"Permissions",id:"permissions",level:3},{value:"State",id:"state",level:2},{value:"Params",id:"params",level:2},{value:"Keepers",id:"keepers",level:2},{value:"Denied Addresses",id:"denied-addresses",level:3},{value:"Common Types",id:"common-types",level:3},{value:"Input",id:"input",level:4},{value:"Output",id:"output",level:4},{value:"BaseKeeper",id:"basekeeper",level:3},{value:"SendKeeper",id:"sendkeeper",level:3},{value:"ViewKeeper",id:"viewkeeper",level:3},{value:"Messages",id:"messages",level:2},{value:"MsgSend",id:"msgsend",level:3},{value:"MsgMultiSend",id:"msgmultisend",level:3},{value:"MsgUpdateParams",id:"msgupdateparams",level:3},{value:"MsgSetSendEnabled",id:"msgsetsendenabled",level:3},{value:"Events",id:"events",level:2},{value:"Message Events",id:"message-events",level:3},{value:"MsgSend",id:"msgsend-1",level:4},{value:"MsgMultiSend",id:"msgmultisend-1",level:4},{value:"Keeper Events",id:"keeper-events",level:3},{value:"MintCoins",id:"mintcoins",level:4},{value:"BurnCoins",id:"burncoins",level:4},{value:"addCoins",id:"addcoins",level:4},{value:"subUnlockedCoins/DelegateCoins",id:"subunlockedcoinsdelegatecoins",level:4},{value:"Parameters",id:"parameters",level:2},{value:"SendEnabled",id:"sendenabled",level:3},{value:"DefaultSendEnabled",id:"defaultsendenabled",level:3},{value:"Client",id:"client",level:2},{value:"CLI",id:"cli",level:3},{value:"Query",id:"query",level:4},{value:"balances",id:"balances",level:5},{value:"denom-metadata",id:"denom-metadata",level:5},{value:"total",id:"total",level:5},{value:"send-enabled",id:"send-enabled",level:5},{value:"Transactions",id:"transactions",level:4},{value:"send",id:"send",level:5},{value:"gRPC",id:"grpc",level:2},{value:"Balance",id:"balance",level:3},{value:"AllBalances",id:"allbalances",level:3},{value:"DenomMetadata",id:"denommetadata",level:3},{value:"DenomsMetadata",id:"denomsmetadata",level:3},{value:"DenomOwners",id:"denomowners",level:3},{value:"TotalSupply",id:"totalsupply",level:3},{value:"SupplyOf",id:"supplyof",level:3},{value:"Params",id:"params-1",level:3},{value:"SendEnabled",id:"sendenabled-1",level:3}],p={toc:d};function u(e){let{components:n,...t}=e;return(0,l.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"xbank"},(0,l.kt)("inlineCode",{parentName:"h1"},"x/bank")),(0,l.kt)("h2",{id:"abstract"},"Abstract"),(0,l.kt)("p",null,"This document specifies the bank module of the Cosmos SDK."),(0,l.kt)("p",null,"The bank module is responsible for handling multi-asset coin transfers between\naccounts and tracking special-case pseudo-transfers which must work differently\nwith particular kinds of accounts (notably delegating/undelegating for vesting\naccounts). It exposes several interfaces with varying capabilities for secure\ninteraction with other modules which must alter user balances."),(0,l.kt)("p",null,"In addition, the bank module tracks and provides query support for the total\nsupply of all assets used in the application."),(0,l.kt)("p",null,"This module is used in the Cosmos Hub."),(0,l.kt)("h2",{id:"contents"},"Contents"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#supply"},"Supply"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#total-supply"},"Total Supply")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#module-accounts"},"Module Accounts"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#permissions"},"Permissions")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#state"},"State")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#params"},"Params")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#keepers"},"Keepers")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#messages"},"Messages")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#events"},"Events"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#message-events"},"Message Events")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#keeper-events"},"Keeper Events")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#parameters"},"Parameters"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#sendenabled"},"SendEnabled")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#defaultsendenabled"},"DefaultSendEnabled")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#client"},"Client"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#cli"},"CLI")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#query"},"Query")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#transactions"},"Transactions")))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"#grpc"},"gRPC"))),(0,l.kt)("h2",{id:"supply"},"Supply"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"supply")," functionality:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"passively tracks the total supply of coins within a chain,"),(0,l.kt)("li",{parentName:"ul"},"provides a pattern for modules to hold/interact with ",(0,l.kt)("inlineCode",{parentName:"li"},"Coins"),", and"),(0,l.kt)("li",{parentName:"ul"},"introduces the invariant check to verify a chain's total supply.")),(0,l.kt)("h3",{id:"total-supply"},"Total Supply"),(0,l.kt)("p",null,"The total ",(0,l.kt)("inlineCode",{parentName:"p"},"Supply")," of the network is equal to the sum of all coins from the\naccount. The total supply is updated every time a ",(0,l.kt)("inlineCode",{parentName:"p"},"Coin")," is minted (eg: as part\nof the inflation mechanism) or burned (eg: due to slashing or if a governance\nproposal is vetoed)."),(0,l.kt)("h2",{id:"module-accounts"},"Module Accounts"),(0,l.kt)("p",null,"The supply functionality introduces a new type of ",(0,l.kt)("inlineCode",{parentName:"p"},"auth.Account")," which can be used by\nmodules to allocate tokens and in special cases mint or burn tokens. At a base\nlevel these module accounts are capable of sending/receiving tokens to and from\n",(0,l.kt)("inlineCode",{parentName:"p"},"auth.Account"),"s and other module accounts. This design replaces previous\nalternative designs where, to hold tokens, modules would burn the incoming\ntokens from the sender account, and then track those tokens internally. Later,\nin order to send tokens, the module would need to effectively mint tokens\nwithin a destination account. The new design removes duplicate logic between\nmodules to perform this accounting."),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"ModuleAccount")," interface is defined as follows:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"type ModuleAccount interface {\n  auth.Account               // same methods as the Account interface\n\n  GetName() string           // name of the module; used to obtain the address\n  GetPermissions() []string  // permissions of module account\n  HasPermission(string) bool\n}\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"WARNING!"),"\nAny module or message handler that allows either direct or indirect sending of funds must explicitly guarantee those funds cannot be sent to module accounts (unless allowed).")),(0,l.kt)("p",null,"The supply ",(0,l.kt)("inlineCode",{parentName:"p"},"Keeper")," also introduces new wrapper functions for the auth ",(0,l.kt)("inlineCode",{parentName:"p"},"Keeper"),"\nand the bank ",(0,l.kt)("inlineCode",{parentName:"p"},"Keeper")," that are related to ",(0,l.kt)("inlineCode",{parentName:"p"},"ModuleAccount"),"s in order to be able\nto:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Get and set ",(0,l.kt)("inlineCode",{parentName:"li"},"ModuleAccount"),"s by providing the ",(0,l.kt)("inlineCode",{parentName:"li"},"Name"),"."),(0,l.kt)("li",{parentName:"ul"},"Send coins from and to other ",(0,l.kt)("inlineCode",{parentName:"li"},"ModuleAccount"),"s or standard ",(0,l.kt)("inlineCode",{parentName:"li"},"Account"),"s\n(",(0,l.kt)("inlineCode",{parentName:"li"},"BaseAccount")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"VestingAccount"),") by passing only the ",(0,l.kt)("inlineCode",{parentName:"li"},"Name"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Mint")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"Burn")," coins for a ",(0,l.kt)("inlineCode",{parentName:"li"},"ModuleAccount")," (restricted to its permissions).")),(0,l.kt)("h3",{id:"permissions"},"Permissions"),(0,l.kt)("p",null,"Each ",(0,l.kt)("inlineCode",{parentName:"p"},"ModuleAccount")," has a different set of permissions that provide different\nobject capabilities to perform certain actions. Permissions need to be\nregistered upon the creation of the supply ",(0,l.kt)("inlineCode",{parentName:"p"},"Keeper")," so that every time a\n",(0,l.kt)("inlineCode",{parentName:"p"},"ModuleAccount")," calls the allowed functions, the ",(0,l.kt)("inlineCode",{parentName:"p"},"Keeper")," can lookup the\npermissions to that specific account and perform or not perform the action."),(0,l.kt)("p",null,"The available permissions are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Minter"),": allows for a module to mint a specific amount of coins."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Burner"),": allows for a module to burn a specific amount of coins."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Staking"),": allows for a module to delegate and undelegate a specific amount of coins.")),(0,l.kt)("h2",{id:"state"},"State"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"x/bank")," module keeps state of the following primary objects:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Account balances"),(0,l.kt)("li",{parentName:"ol"},"Denomination metadata"),(0,l.kt)("li",{parentName:"ol"},"The total supply of all balances"),(0,l.kt)("li",{parentName:"ol"},"Information on which denominations are allowed to be sent.")),(0,l.kt)("p",null,"In addition, the ",(0,l.kt)("inlineCode",{parentName:"p"},"x/bank")," module keeps the following indexes to manage the\naforementioned state:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Supply Index: ",(0,l.kt)("inlineCode",{parentName:"li"},"0x0 | byte(denom) -> byte(amount)")),(0,l.kt)("li",{parentName:"ul"},"Denom Metadata Index: ",(0,l.kt)("inlineCode",{parentName:"li"},"0x1 | byte(denom) -> ProtocolBuffer(Metadata)")),(0,l.kt)("li",{parentName:"ul"},"Balances Index: ",(0,l.kt)("inlineCode",{parentName:"li"},"0x2 | byte(address length) | []byte(address) | []byte(balance.Denom) -> ProtocolBuffer(balance)")),(0,l.kt)("li",{parentName:"ul"},"Reverse Denomination to Address Index: ",(0,l.kt)("inlineCode",{parentName:"li"},"0x03 | byte(denom) | 0x00 | []byte(address) -> 0"))),(0,l.kt)("h2",{id:"params"},"Params"),(0,l.kt)("p",null,"The bank module stores it's params in state with the prefix of ",(0,l.kt)("inlineCode",{parentName:"p"},"0x05"),",\nit can be updated with governance or the address with authority."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Params: ",(0,l.kt)("inlineCode",{parentName:"li"},"0x05 | ProtocolBuffer(Params)"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/bank/v1beta1/bank.proto#L12-L23\n")),(0,l.kt)("h2",{id:"keepers"},"Keepers"),(0,l.kt)("p",null,"The bank module provides these exported keeper interfaces that can be\npassed to other modules that read or update account balances. Modules\nshould use the least-permissive interface that provides the functionality they\nrequire."),(0,l.kt)("p",null,"Best practices dictate careful review of ",(0,l.kt)("inlineCode",{parentName:"p"},"bank")," module code to ensure that\npermissions are limited in the way that you expect."),(0,l.kt)("h3",{id:"denied-addresses"},"Denied Addresses"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"x/bank")," module accepts a map of addresses that are considered blocklisted\nfrom directly and explicitly receiving funds through means such as ",(0,l.kt)("inlineCode",{parentName:"p"},"MsgSend")," and\n",(0,l.kt)("inlineCode",{parentName:"p"},"MsgMultiSend")," and direct API calls like ",(0,l.kt)("inlineCode",{parentName:"p"},"SendCoinsFromModuleToAccount"),"."),(0,l.kt)("p",null,"Typically, these addresses are module accounts. If these addresses receive funds\noutside the expected rules of the state machine, invariants are likely to be\nbroken and could result in a halted network."),(0,l.kt)("p",null,"By providing the ",(0,l.kt)("inlineCode",{parentName:"p"},"x/bank")," module with a blocklisted set of addresses, an error occurs for the operation if a user or client attempts to directly or indirectly send funds to a blocklisted account, for example, by using ",(0,l.kt)("a",{parentName:"p",href:"https://ibc.cosmos.network"},"IBC"),"."),(0,l.kt)("h3",{id:"common-types"},"Common Types"),(0,l.kt)("h4",{id:"input"},"Input"),(0,l.kt)("p",null,"An input of a multiparty transfer"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-protobuf"},"// Input models transaction input.\nmessage Input {\n  string   address                        = 1;\n  repeated cosmos.base.v1beta1.Coin coins = 2;\n}\n")),(0,l.kt)("h4",{id:"output"},"Output"),(0,l.kt)("p",null,"An output of a multiparty transfer."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-protobuf"},"// Output models transaction outputs.\nmessage Output {\n  string   address                        = 1;\n  repeated cosmos.base.v1beta1.Coin coins = 2;\n}\n")),(0,l.kt)("h3",{id:"basekeeper"},"BaseKeeper"),(0,l.kt)("p",null,"The base keeper provides full-permission access: the ability to arbitrary modify any account's balance and mint or burn coins."),(0,l.kt)("p",null,"Restricted permission to mint per module could be achieved by using baseKeeper with ",(0,l.kt)("inlineCode",{parentName:"p"},"WithMintCoinsRestriction")," to give specific restrictions to mint (e.g. only minting certain denom)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// Keeper defines a module interface that facilitates the transfer of coins\n// between accounts.\ntype Keeper interface {\n    SendKeeper\n    WithMintCoinsRestriction(MintingRestrictionFn) BaseKeeper\n\n    InitGenesis(context.Context, *types.GenesisState)\n    ExportGenesis(context.Context) *types.GenesisState\n\n    GetSupply(ctx context.Context, denom string) sdk.Coin\n    HasSupply(ctx context.Context, denom string) bool\n    GetPaginatedTotalSupply(ctx context.Context, pagination *query.PageRequest) (sdk.Coins, *query.PageResponse, error)\n    IterateTotalSupply(ctx context.Context, cb func(sdk.Coin) bool)\n    GetDenomMetaData(ctx context.Context, denom string) (types.Metadata, bool)\n    HasDenomMetaData(ctx context.Context, denom string) bool\n    SetDenomMetaData(ctx context.Context, denomMetaData types.Metadata)\n    IterateAllDenomMetaData(ctx context.Context, cb func(types.Metadata) bool)\n\n    SendCoinsFromModuleToAccount(ctx context.Context, senderModule string, recipientAddr sdk.AccAddress, amt sdk.Coins) error\n    SendCoinsFromModuleToModule(ctx context.Context, senderModule, recipientModule string, amt sdk.Coins) error\n    SendCoinsFromAccountToModule(ctx context.Context, senderAddr sdk.AccAddress, recipientModule string, amt sdk.Coins) error\n    DelegateCoinsFromAccountToModule(ctx context.Context, senderAddr sdk.AccAddress, recipientModule string, amt sdk.Coins) error\n    UndelegateCoinsFromModuleToAccount(ctx context.Context, senderModule string, recipientAddr sdk.AccAddress, amt sdk.Coins) error\n    MintCoins(ctx context.Context, moduleName string, amt sdk.Coins) error\n    BurnCoins(ctx context.Context, moduleName string, amt sdk.Coins) error\n\n    DelegateCoins(ctx context.Context, delegatorAddr, moduleAccAddr sdk.AccAddress, amt sdk.Coins) error\n    UndelegateCoins(ctx context.Context, moduleAccAddr, delegatorAddr sdk.AccAddress, amt sdk.Coins) error\n\n    // GetAuthority gets the address capable of executing governance proposal messages. Usually the gov module account.\n    GetAuthority() string\n\n    types.QueryServer\n}\n")),(0,l.kt)("h3",{id:"sendkeeper"},"SendKeeper"),(0,l.kt)("p",null,"The send keeper provides access to account balances and the ability to transfer coins between\naccounts. The send keeper does not alter the total supply (mint or burn coins)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// SendKeeper defines a module interface that facilitates the transfer of coins\n// between accounts without the possibility of creating coins.\ntype SendKeeper interface {\n    ViewKeeper\n\n    InputOutputCoins(ctx context.Context, inputs types.Input, outputs []types.Output) error\n    SendCoins(ctx context.Context, fromAddr sdk.AccAddress, toAddr sdk.AccAddress, amt sdk.Coins) error\n\n    GetParams(ctx context.Context) types.Params\n    SetParams(ctx context.Context, params types.Params) error\n\n    IsSendEnabledDenom(ctx context.Context, denom string) bool\n    SetSendEnabled(ctx context.Context, denom string, value bool)\n    SetAllSendEnabled(ctx context.Context, sendEnableds []*types.SendEnabled)\n    DeleteSendEnabled(ctx context.Context, denom string)\n    IterateSendEnabledEntries(ctx context.Context, cb func(denom string, sendEnabled bool) (stop bool))\n    GetAllSendEnabledEntries(ctx context.Context) []types.SendEnabled\n\n    IsSendEnabledCoin(ctx context.Context, coin sdk.Coin) bool\n    IsSendEnabledCoins(ctx context.Context, coins ...sdk.Coin) error\n\n    BlockedAddr(addr sdk.AccAddress) bool\n}\n")),(0,l.kt)("h3",{id:"viewkeeper"},"ViewKeeper"),(0,l.kt)("p",null,"The view keeper provides read-only access to account balances. The view keeper does not have balance alteration functionality. All balance lookups are ",(0,l.kt)("inlineCode",{parentName:"p"},"O(1)"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// ViewKeeper defines a module interface that facilitates read only access to\n// account balances.\ntype ViewKeeper interface {\n    ValidateBalance(ctx context.Context, addr sdk.AccAddress) error\n    HasBalance(ctx context.Context, addr sdk.AccAddress, amt sdk.Coin) bool\n\n    GetAllBalances(ctx context.Context, addr sdk.AccAddress) sdk.Coins\n    GetAccountsBalances(ctx context.Context) []types.Balance\n    GetBalance(ctx context.Context, addr sdk.AccAddress, denom string) sdk.Coin\n    LockedCoins(ctx context.Context, addr sdk.AccAddress) sdk.Coins\n    SpendableCoins(ctx context.Context, addr sdk.AccAddress) sdk.Coins\n    SpendableCoin(ctx context.Context, addr sdk.AccAddress, denom string) sdk.Coin\n\n    IterateAccountBalances(ctx context.Context, addr sdk.AccAddress, cb func(coin sdk.Coin) (stop bool))\n    IterateAllBalances(ctx context.Context, cb func(address sdk.AccAddress, coin sdk.Coin) (stop bool))\n}\n")),(0,l.kt)("h2",{id:"messages"},"Messages"),(0,l.kt)("h3",{id:"msgsend"},"MsgSend"),(0,l.kt)("p",null,"Send coins from one address to another."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/bank/v1beta1/tx.proto#L38-L53\n")),(0,l.kt)("p",null,"The message will fail under the following conditions:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The coins do not have sending enabled"),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"to")," address is restricted")),(0,l.kt)("h3",{id:"msgmultisend"},"MsgMultiSend"),(0,l.kt)("p",null,"Send coins from one sender and to a series of different address. If any of the receiving addresses do not correspond to an existing account, a new account is created."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/bank/v1beta1/tx.proto#L58-L69\n")),(0,l.kt)("p",null,"The message will fail under the following conditions:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Any of the coins do not have sending enabled"),(0,l.kt)("li",{parentName:"ul"},"Any of the ",(0,l.kt)("inlineCode",{parentName:"li"},"to")," addresses are restricted"),(0,l.kt)("li",{parentName:"ul"},"Any of the coins are locked"),(0,l.kt)("li",{parentName:"ul"},"The inputs and outputs do not correctly correspond to one another")),(0,l.kt)("h3",{id:"msgupdateparams"},"MsgUpdateParams"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"bank")," module params can be updated through ",(0,l.kt)("inlineCode",{parentName:"p"},"MsgUpdateParams"),", which can be done using governance proposal. The signer will always be the ",(0,l.kt)("inlineCode",{parentName:"p"},"gov")," module account address. "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/bank/v1beta1/tx.proto#L74-L88\n")),(0,l.kt)("p",null,"The message handling can fail if:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"signer is not the gov module account address.")),(0,l.kt)("h3",{id:"msgsetsendenabled"},"MsgSetSendEnabled"),(0,l.kt)("p",null,"Used with the x/gov module to set create/edit SendEnabled entries."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-protobuf",metastring:"reference",reference:!0},"https://github.com/cosmos/cosmos-sdk/blob/v0.47.0-rc1/proto/cosmos/bank/v1beta1/tx.proto#L96-L117\n")),(0,l.kt)("p",null,"The message will fail under the following conditions:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The authority is not a bech32 address."),(0,l.kt)("li",{parentName:"ul"},"The authority is not x/gov module's address."),(0,l.kt)("li",{parentName:"ul"},"There are multiple SendEnabled entries with the same Denom."),(0,l.kt)("li",{parentName:"ul"},"One or more SendEnabled entries has an invalid Denom.")),(0,l.kt)("h2",{id:"events"},"Events"),(0,l.kt)("p",null,"The bank module emits the following events:"),(0,l.kt)("h3",{id:"message-events"},"Message Events"),(0,l.kt)("h4",{id:"msgsend-1"},"MsgSend"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"transfer"),(0,l.kt)("td",{parentName:"tr",align:null},"recipient"),(0,l.kt)("td",{parentName:"tr",align:null},"{recipientAddress}")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"transfer"),(0,l.kt)("td",{parentName:"tr",align:null},"amount"),(0,l.kt)("td",{parentName:"tr",align:null},"{amount}")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"message"),(0,l.kt)("td",{parentName:"tr",align:null},"module"),(0,l.kt)("td",{parentName:"tr",align:null},"bank")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"message"),(0,l.kt)("td",{parentName:"tr",align:null},"action"),(0,l.kt)("td",{parentName:"tr",align:null},"send")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"message"),(0,l.kt)("td",{parentName:"tr",align:null},"sender"),(0,l.kt)("td",{parentName:"tr",align:null},"{senderAddress}")))),(0,l.kt)("h4",{id:"msgmultisend-1"},"MsgMultiSend"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Key"),(0,l.kt)("th",{parentName:"tr",align:null},"Attribute Value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"transfer"),(0,l.kt)("td",{parentName:"tr",align:null},"recipient"),(0,l.kt)("td",{parentName:"tr",align:null},"{recipientAddress}")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"transfer"),(0,l.kt)("td",{parentName:"tr",align:null},"amount"),(0,l.kt)("td",{parentName:"tr",align:null},"{amount}")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"message"),(0,l.kt)("td",{parentName:"tr",align:null},"module"),(0,l.kt)("td",{parentName:"tr",align:null},"bank")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"message"),(0,l.kt)("td",{parentName:"tr",align:null},"action"),(0,l.kt)("td",{parentName:"tr",align:null},"multisend")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"message"),(0,l.kt)("td",{parentName:"tr",align:null},"sender"),(0,l.kt)("td",{parentName:"tr",align:null},"{senderAddress}")))),(0,l.kt)("h3",{id:"keeper-events"},"Keeper Events"),(0,l.kt)("p",null,"In addition to message events, the bank keeper will produce events when the following methods are called (or any method which ends up calling them)"),(0,l.kt)("h4",{id:"mintcoins"},"MintCoins"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "coinbase",\n  "attributes": [\n    {\n      "key": "minter",\n      "value": "{{sdk.AccAddress of the module minting coins}}",\n      "index": true\n    },\n    {\n      "key": "amount",\n      "value": "{{sdk.Coins being minted}}",\n      "index": true\n    }\n  ]\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "coin_received",\n  "attributes": [\n    {\n      "key": "receiver",\n      "value": "{{sdk.AccAddress of the module minting coins}}",\n      "index": true\n    },\n    {\n      "key": "amount",\n      "value": "{{sdk.Coins being received}}",\n      "index": true\n    }\n  ]\n}\n')),(0,l.kt)("h4",{id:"burncoins"},"BurnCoins"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "burn",\n  "attributes": [\n    {\n      "key": "burner",\n      "value": "{{sdk.AccAddress of the module burning coins}}",\n      "index": true\n    },\n    {\n      "key": "amount",\n      "value": "{{sdk.Coins being burned}}",\n      "index": true\n    }\n  ]\n}\n')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "coin_spent",\n  "attributes": [\n    {\n      "key": "spender",\n      "value": "{{sdk.AccAddress of the module burning coins}}",\n      "index": true\n    },\n    {\n      "key": "amount",\n      "value": "{{sdk.Coins being burned}}",\n      "index": true\n    }\n  ]\n}\n')),(0,l.kt)("h4",{id:"addcoins"},"addCoins"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "coin_received",\n  "attributes": [\n    {\n      "key": "receiver",\n      "value": "{{sdk.AccAddress of the address beneficiary of the coins}}",\n      "index": true\n    },\n    {\n      "key": "amount",\n      "value": "{{sdk.Coins being received}}",\n      "index": true\n    }\n  ]\n}\n')),(0,l.kt)("h4",{id:"subunlockedcoinsdelegatecoins"},"subUnlockedCoins/DelegateCoins"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "type": "coin_spent",\n  "attributes": [\n    {\n      "key": "spender",\n      "value": "{{sdk.AccAddress of the address which is spending coins}}",\n      "index": true\n    },\n    {\n      "key": "amount",\n      "value": "{{sdk.Coins being spent}}",\n      "index": true\n    }\n  ]\n}\n')),(0,l.kt)("h2",{id:"parameters"},"Parameters"),(0,l.kt)("p",null,"The bank module contains the following parameters"),(0,l.kt)("h3",{id:"sendenabled"},"SendEnabled"),(0,l.kt)("p",null,"The SendEnabled parameter is now deprecated and not to be use. It is replaced\nwith state store records."),(0,l.kt)("h3",{id:"defaultsendenabled"},"DefaultSendEnabled"),(0,l.kt)("p",null,"The default send enabled value controls send transfer capability for all\ncoin denominations unless specifically included in the array of ",(0,l.kt)("inlineCode",{parentName:"p"},"SendEnabled"),"\nparameters."),(0,l.kt)("h2",{id:"client"},"Client"),(0,l.kt)("h3",{id:"cli"},"CLI"),(0,l.kt)("p",null,"A user can query and interact with the ",(0,l.kt)("inlineCode",{parentName:"p"},"bank")," module using the CLI."),(0,l.kt)("h4",{id:"query"},"Query"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"query")," commands allow users to query ",(0,l.kt)("inlineCode",{parentName:"p"},"bank")," state."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"simd query bank --help\n")),(0,l.kt)("h5",{id:"balances"},"balances"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"balances")," command allows users to query account balances by address."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"simd query bank balances [address] [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"simd query bank balances cosmos1..\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'balances:\n- amount: "1000000000"\n  denom: stake\npagination:\n  next_key: null\n  total: "0"\n')),(0,l.kt)("h5",{id:"denom-metadata"},"denom-metadata"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"denom-metadata")," command allows users to query metadata for coin denominations. A user can query metadata for a single denomination using the ",(0,l.kt)("inlineCode",{parentName:"p"},"--denom")," flag or all denominations without it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"simd query bank denom-metadata [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"simd query bank denom-metadata --denom stake\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"metadata:\n  base: stake\n  denom_units:\n  - aliases:\n    - STAKE\n    denom: stake\n  description: native staking token of simulation app\n  display: stake\n  name: SimApp Token\n  symbol: STK\n")),(0,l.kt)("h5",{id:"total"},"total"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"total")," command allows users to query the total supply of coins. A user can query the total supply for a single coin using the ",(0,l.kt)("inlineCode",{parentName:"p"},"--denom")," flag or all coins without it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"simd query bank total [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"simd query bank total --denom stake\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},'amount: "10000000000"\ndenom: stake\n')),(0,l.kt)("h5",{id:"send-enabled"},"send-enabled"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"send-enabled")," command allows users to query for all or some SendEnabled entries."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"simd query bank send-enabled [denom1 ...] [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"simd query bank send-enabled\n")),(0,l.kt)("p",null,"Example output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yml"},"send_enabled:\n- denom: foocoin\n  enabled: true\n- denom: barcoin\npagination:\n  next-key: null\n  total: 2 \n")),(0,l.kt)("h4",{id:"transactions"},"Transactions"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"tx")," commands allow users to interact with the ",(0,l.kt)("inlineCode",{parentName:"p"},"bank")," module."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"simd tx bank --help\n")),(0,l.kt)("h5",{id:"send"},"send"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"send")," command allows users to send funds from one account to another."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"simd tx bank send [from_key_or_address] [to_address] [amount] [flags]\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"simd tx bank send cosmos1.. cosmos1.. 100stake\n")),(0,l.kt)("h2",{id:"grpc"},"gRPC"),(0,l.kt)("p",null,"A user can query the ",(0,l.kt)("inlineCode",{parentName:"p"},"bank")," module using gRPC endpoints."),(0,l.kt)("h3",{id:"balance"},"Balance"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Balance")," endpoint allows users to query account balance by address for a given denomination."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"cosmos.bank.v1beta1.Query/Balance\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'grpcurl -plaintext \\\n    -d \'{"address":"cosmos1..","denom":"stake"}\' \\\n    localhost:9090 \\\n    cosmos.bank.v1beta1.Query/Balance\n')),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "balance": {\n    "denom": "stake",\n    "amount": "1000000000"\n  }\n}\n')),(0,l.kt)("h3",{id:"allbalances"},"AllBalances"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"AllBalances")," endpoint allows users to query account balance by address for all denominations."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"cosmos.bank.v1beta1.Query/AllBalances\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'grpcurl -plaintext \\\n    -d \'{"address":"cosmos1.."}\' \\\n    localhost:9090 \\\n    cosmos.bank.v1beta1.Query/AllBalances\n')),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "balances": [\n    {\n      "denom": "stake",\n      "amount": "1000000000"\n    }\n  ],\n  "pagination": {\n    "total": "1"\n  }\n}\n')),(0,l.kt)("h3",{id:"denommetadata"},"DenomMetadata"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"DenomMetadata")," endpoint allows users to query metadata for a single coin denomination."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"cosmos.bank.v1beta1.Query/DenomMetadata\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'grpcurl -plaintext \\\n    -d \'{"denom":"stake"}\' \\\n    localhost:9090 \\\n    cosmos.bank.v1beta1.Query/DenomMetadata\n')),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "metadata": {\n    "description": "native staking token of simulation app",\n    "denomUnits": [\n      {\n        "denom": "stake",\n        "aliases": [\n          "STAKE"\n        ]\n      }\n    ],\n    "base": "stake",\n    "display": "stake",\n    "name": "SimApp Token",\n    "symbol": "STK"\n  }\n}\n')),(0,l.kt)("h3",{id:"denomsmetadata"},"DenomsMetadata"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"DenomsMetadata")," endpoint allows users to query metadata for all coin denominations."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"cosmos.bank.v1beta1.Query/DenomsMetadata\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"grpcurl -plaintext \\\n    localhost:9090 \\\n    cosmos.bank.v1beta1.Query/DenomsMetadata\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "metadatas": [\n    {\n      "description": "native staking token of simulation app",\n      "denomUnits": [\n        {\n          "denom": "stake",\n          "aliases": [\n            "STAKE"\n          ]\n        }\n      ],\n      "base": "stake",\n      "display": "stake",\n      "name": "SimApp Token",\n      "symbol": "STK"\n    }\n  ],\n  "pagination": {\n    "total": "1"\n  }\n}\n')),(0,l.kt)("h3",{id:"denomowners"},"DenomOwners"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"DenomOwners")," endpoint allows users to query metadata for a single coin denomination."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"cosmos.bank.v1beta1.Query/DenomOwners\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'grpcurl -plaintext \\\n    -d \'{"denom":"stake"}\' \\\n    localhost:9090 \\\n    cosmos.bank.v1beta1.Query/DenomOwners\n')),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "denomOwners": [\n    {\n      "address": "cosmos1..",\n      "balance": {\n        "denom": "stake",\n        "amount": "5000000000"\n      }\n    },\n    {\n      "address": "cosmos1..",\n      "balance": {\n        "denom": "stake",\n        "amount": "5000000000"\n      }\n    },\n  ],\n  "pagination": {\n    "total": "2"\n  }\n}\n')),(0,l.kt)("h3",{id:"totalsupply"},"TotalSupply"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"TotalSupply")," endpoint allows users to query the total supply of all coins."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"cosmos.bank.v1beta1.Query/TotalSupply\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"grpcurl -plaintext \\\n    localhost:9090 \\\n    cosmos.bank.v1beta1.Query/TotalSupply\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "supply": [\n    {\n      "denom": "stake",\n      "amount": "10000000000"\n    }\n  ],\n  "pagination": {\n    "total": "1"\n  }\n}\n')),(0,l.kt)("h3",{id:"supplyof"},"SupplyOf"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"SupplyOf")," endpoint allows users to query the total supply of a single coin."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"cosmos.bank.v1beta1.Query/SupplyOf\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},'grpcurl -plaintext \\\n    -d \'{"denom":"stake"}\' \\\n    localhost:9090 \\\n    cosmos.bank.v1beta1.Query/SupplyOf\n')),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "amount": {\n    "denom": "stake",\n    "amount": "10000000000"\n  }\n}\n')),(0,l.kt)("h3",{id:"params-1"},"Params"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"Params")," endpoint allows users to query the parameters of the ",(0,l.kt)("inlineCode",{parentName:"p"},"bank")," module."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"cosmos.bank.v1beta1.Query/Params\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"grpcurl -plaintext \\\n    localhost:9090 \\\n    cosmos.bank.v1beta1.Query/Params\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "params": {\n    "defaultSendEnabled": true\n  }\n}\n')),(0,l.kt)("h3",{id:"sendenabled-1"},"SendEnabled"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"SendEnabled")," enpoints allows users to query the SendEnabled entries of the ",(0,l.kt)("inlineCode",{parentName:"p"},"bank")," module."),(0,l.kt)("p",null,"Any denominations NOT returned, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"Params.DefaultSendEnabled")," value."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"cosmos.bank.v1beta1.Query/SendEnabled\n")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"grpcurl -plaintext \\\n    localhost:9090 \\\n    cosmos.bank.v1beta1.Query/SendEnabled\n")),(0,l.kt)("p",null,"Example Output:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "send_enabled": [\n    {\n      "denom": "foocoin",\n      "enabled": true\n    },\n    {\n      "denom": "barcoin"\n    }\n  ],\n  "pagination": {\n    "next-key": null,\n    "total": 2\n  }\n}\n')))}u.isMDXComponent=!0}}]);