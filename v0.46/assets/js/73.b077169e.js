(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{596:function(e,t,a){"use strict";a.r(t);var n=a(1),i=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"adr-009-evidence-module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#adr-009-evidence-module"}},[e._v("#")]),e._v(" ADR 009: Evidence Module")]),e._v(" "),a("h2",{attrs:{id:"changelog"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#changelog"}},[e._v("#")]),e._v(" Changelog")]),e._v(" "),a("ul",[a("li",[e._v("2019 July 31: Initial draft")]),e._v(" "),a("li",[e._v("2019 October 24: Initial implementation")])]),e._v(" "),a("h2",{attrs:{id:"status"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#status"}},[e._v("#")]),e._v(" Status")]),e._v(" "),a("p",[e._v("Accepted")]),e._v(" "),a("h2",{attrs:{id:"context"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#context"}},[e._v("#")]),e._v(" Context")]),e._v(" "),a("p",[e._v("In order to support building highly secure, robust and interoperable blockchain\napplications, it is vital for the Cosmos SDK to expose a mechanism in which arbitrary\nevidence can be submitted, evaluated and verified resulting in some agreed upon\npenalty for any misbehavior committed by a validator, such as equivocation (double-voting),\nsigning when unbonded, signing an incorrect state transition (in the future), etc.\nFurthermore, such a mechanism is paramount for any\n"),a("a",{attrs:{href:"https://github.com/cosmos/ics/blob/master/ibc/2_IBC_ARCHITECTURE.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("IBC"),a("OutboundLink")],1),e._v(" or\ncross-chain validation protocol implementation in order to support the ability\nfor any misbehavior to be relayed back from a collateralized chain to a primary\nchain so that the equivocating validator(s) can be slashed.")]),e._v(" "),a("h2",{attrs:{id:"decision"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#decision"}},[e._v("#")]),e._v(" Decision")]),e._v(" "),a("p",[e._v("We will implement an evidence module in the Cosmos SDK supporting the following\nfunctionality:")]),e._v(" "),a("ul",[a("li",[e._v("Provide developers with the abstractions and interfaces necessary to define\ncustom evidence messages, message handlers, and methods to slash and penalize\naccordingly for misbehavior.")]),e._v(" "),a("li",[e._v("Support the ability to route evidence messages to handlers in any module to\ndetermine the validity of submitted misbehavior.")]),e._v(" "),a("li",[e._v("Support the ability, through governance, to modify slashing penalties of any\nevidence type.")]),e._v(" "),a("li",[e._v("Querier implementation to support querying params, evidence types, params, and\nall submitted valid misbehavior.")])]),e._v(" "),a("h3",{attrs:{id:"types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types"}},[e._v("#")]),e._v(" Types")]),e._v(" "),a("p",[e._v("First, we define the "),a("code",[e._v("Evidence")]),e._v(" interface type. The "),a("code",[e._v("x/evidence")]),e._v(" module may implement\nits own types that can be used by many chains (e.g. "),a("code",[e._v("CounterFactualEvidence")]),e._v(").\nIn addition, other modules may implement their own "),a("code",[e._v("Evidence")]),e._v(" types in a similar\nmanner in which governance is extensible. It is important to note any concrete\ntype implementing the "),a("code",[e._v("Evidence")]),e._v(" interface may include arbitrary fields such as\nan infraction time. We want the "),a("code",[e._v("Evidence")]),e._v(" type to remain as flexible as possible.")]),e._v(" "),a("p",[e._v("When submitting evidence to the "),a("code",[e._v("x/evidence")]),e._v(" module, the concrete type must provide\nthe validator's consensus address, which should be known by the "),a("code",[e._v("x/slashing")]),e._v("\nmodule (assuming the infraction is valid), the height at which the infraction\noccurred and the validator's power at same height in which the infraction occurred.")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"dHlwZSBFdmlkZW5jZSBpbnRlcmZhY2UgewogIFJvdXRlKCkgc3RyaW5nCiAgVHlwZSgpIHN0cmluZwogIFN0cmluZygpIHN0cmluZwogIEhhc2goKSBIZXhCeXRlcwogIFZhbGlkYXRlQmFzaWMoKSBlcnJvcgoKICAvLyBUaGUgY29uc2Vuc3VzIGFkZHJlc3Mgb2YgdGhlIG1hbGljaW91cyB2YWxpZGF0b3IgYXQgdGltZSBvZiBpbmZyYWN0aW9uCiAgR2V0Q29uc2Vuc3VzQWRkcmVzcygpIENvbnNBZGRyZXNzCgogIC8vIEhlaWdodCBhdCB3aGljaCB0aGUgaW5mcmFjdGlvbiBvY2N1cnJlZAogIEdldEhlaWdodCgpIGludDY0CgogIC8vIFRoZSB0b3RhbCBwb3dlciBvZiB0aGUgbWFsaWNpb3VzIHZhbGlkYXRvciBhdCB0aW1lIG9mIGluZnJhY3Rpb24KICBHZXRWYWxpZGF0b3JQb3dlcigpIGludDY0CgogIC8vIFRoZSB0b3RhbCB2YWxpZGF0b3Igc2V0IHBvd2VyIGF0IHRpbWUgb2YgaW5mcmFjdGlvbgogIEdldFRvdGFsUG93ZXIoKSBpbnQ2NAp9Cg=="}}),e._v(" "),a("h3",{attrs:{id:"routing-handling"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#routing-handling"}},[e._v("#")]),e._v(" Routing & Handling")]),e._v(" "),a("p",[e._v("Each "),a("code",[e._v("Evidence")]),e._v(" type must map to a specific unique route and be registered with\nthe "),a("code",[e._v("x/evidence")]),e._v(" module. It accomplishes this through the "),a("code",[e._v("Router")]),e._v(" implementation.")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"dHlwZSBSb3V0ZXIgaW50ZXJmYWNlIHsKICBBZGRSb3V0ZShyIHN0cmluZywgaCBIYW5kbGVyKSBSb3V0ZXIKICBIYXNSb3V0ZShyIHN0cmluZykgYm9vbAogIEdldFJvdXRlKHBhdGggc3RyaW5nKSBIYW5kbGVyCiAgU2VhbCgpCn0K"}}),e._v(" "),a("p",[e._v("Upon successful routing through the "),a("code",[e._v("x/evidence")]),e._v(" module, the "),a("code",[e._v("Evidence")]),e._v(" type\nis passed through a "),a("code",[e._v("Handler")]),e._v(". This "),a("code",[e._v("Handler")]),e._v(" is responsible for executing all\ncorresponding business logic necessary for verifying the evidence as valid. In\naddition, the "),a("code",[e._v("Handler")]),e._v(" may execute any necessary slashing and potential jailing.\nSince slashing fractions will typically result from some form of static functions,\nallow the "),a("code",[e._v("Handler")]),e._v(" to do this provides the greatest flexibility. An example could\nbe "),a("code",[e._v("k * evidence.GetValidatorPower()")]),e._v(" where "),a("code",[e._v("k")]),e._v(" is an on-chain parameter controlled\nby governance. The "),a("code",[e._v("Evidence")]),e._v(" type should provide all the external information\nnecessary in order for the "),a("code",[e._v("Handler")]),e._v(" to make the necessary state transitions.\nIf no error is returned, the "),a("code",[e._v("Evidence")]),e._v(" is considered valid.")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"dHlwZSBIYW5kbGVyIGZ1bmMoQ29udGV4dCwgRXZpZGVuY2UpIGVycm9yCg=="}}),e._v(" "),a("h3",{attrs:{id:"submission"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#submission"}},[e._v("#")]),e._v(" Submission")]),e._v(" "),a("p",[a("code",[e._v("Evidence")]),e._v(" is submitted through a "),a("code",[e._v("MsgSubmitEvidence")]),e._v(" message type which is internally\nhandled by the "),a("code",[e._v("x/evidence")]),e._v(" module's "),a("code",[e._v("SubmitEvidence")]),e._v(".")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"dHlwZSBNc2dTdWJtaXRFdmlkZW5jZSBzdHJ1Y3QgewogIEV2aWRlbmNlCn0KCmZ1bmMgaGFuZGxlTXNnU3VibWl0RXZpZGVuY2UoY3R4IENvbnRleHQsIGtlZXBlciBLZWVwZXIsIG1zZyBNc2dTdWJtaXRFdmlkZW5jZSkgUmVzdWx0IHsKICBpZiBlcnIgOj0ga2VlcGVyLlN1Ym1pdEV2aWRlbmNlKGN0eCwgbXNnLkV2aWRlbmNlKTsgZXJyICE9IG5pbCB7CiAgICByZXR1cm4gZXJyLlJlc3VsdCgpCiAgfQoKICAvLyBlbWl0IGV2ZW50cy4uLgoKICByZXR1cm4gUmVzdWx0ewogICAgLy8gLi4uCiAgfQp9Cg=="}}),e._v(" "),a("p",[e._v("The "),a("code",[e._v("x/evidence")]),e._v(" module's keeper is responsible for matching the "),a("code",[e._v("Evidence")]),e._v(" against\nthe module's router and invoking the corresponding "),a("code",[e._v("Handler")]),e._v(" which may include\nslashing and jailing the validator. Upon success, the submitted evidence is persisted.")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"ZnVuYyAoayBLZWVwZXIpIFN1Ym1pdEV2aWRlbmNlKGN0eCBDb250ZXh0LCBldmlkZW5jZSBFdmlkZW5jZSkgZXJyb3IgewogIGhhbmRsZXIgOj0ga2VlcGVyLnJvdXRlci5HZXRSb3V0ZShldmlkZW5jZS5Sb3V0ZSgpKQogIGlmIGVyciA6PSBoYW5kbGVyKGN0eCwgZXZpZGVuY2UpOyBlcnIgIT0gbmlsIHsKICAgIHJldHVybiBFcnJJbnZhbGlkRXZpZGVuY2Uoa2VlcGVyLmNvZGVzcGFjZSwgZXJyKQogIH0KCiAga2VlcGVyLnNldEV2aWRlbmNlKGN0eCwgZXZpZGVuY2UpCiAgcmV0dXJuIG5pbAp9Cg=="}}),e._v(" "),a("h3",{attrs:{id:"genesis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#genesis"}},[e._v("#")]),e._v(" Genesis")]),e._v(" "),a("p",[e._v("Finally, we need to represent the genesis state of the "),a("code",[e._v("x/evidence")]),e._v(" module. The\nmodule only needs a list of all submitted valid infractions and any necessary params\nfor which the module needs in order to handle submitted evidence. The "),a("code",[e._v("x/evidence")]),e._v("\nmodule will naturally define and route native evidence types for which it'll most\nlikely need slashing penalty constants for.")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"go",base64:"dHlwZSBHZW5lc2lzU3RhdGUgc3RydWN0IHsKICBQYXJhbXMgICAgICAgUGFyYW1zCiAgSW5mcmFjdGlvbnMgIFtdRXZpZGVuY2UKfQo="}}),e._v(" "),a("h2",{attrs:{id:"consequences"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consequences"}},[e._v("#")]),e._v(" Consequences")]),e._v(" "),a("h3",{attrs:{id:"positive"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#positive"}},[e._v("#")]),e._v(" Positive")]),e._v(" "),a("ul",[a("li",[e._v("Allows the state machine to process misbehavior submitted on-chain and penalize\nvalidators based on agreed upon slashing parameters.")]),e._v(" "),a("li",[e._v("Allows evidence types to be defined and handled by any module. This further allows\nslashing and jailing to be defined by more complex mechanisms.")]),e._v(" "),a("li",[e._v("Does not solely rely on Tendermint to submit evidence.")])]),e._v(" "),a("h3",{attrs:{id:"negative"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#negative"}},[e._v("#")]),e._v(" Negative")]),e._v(" "),a("ul",[a("li",[e._v("No easy way to introduce new evidence types through governance on a live chain\ndue to the inability to introduce the new evidence type's corresponding handler")])]),e._v(" "),a("h3",{attrs:{id:"neutral"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#neutral"}},[e._v("#")]),e._v(" Neutral")]),e._v(" "),a("ul",[a("li",[e._v("Should we persist infractions indefinitely? Or should we rather rely on events?")])]),e._v(" "),a("h2",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://github.com/cosmos/ics",target:"_blank",rel:"noopener noreferrer"}},[e._v("ICS"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/cosmos/ics/blob/master/ibc/1_IBC_ARCHITECTURE.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("IBC Architecture"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/tendermint/spec/blob/7b3138e69490f410768d9b1ffc7a17abc23ea397/spec/consensus/fork-accountability.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Tendermint Fork Accountability"),a("OutboundLink")],1)])])],1)}),[],!1,null,null,null);t.default=i.exports}}]);